---
server:
  tomcat:
    threads: # scaling
      max: 100
      min-spare: 50
  servlet:
    session:
      cookie:
        name: BSESSION
  ssl:
    enabled: false

spring:
  datasource:
    url: ${spring.flyway.url}/${spring.flyway.schemas}
    username: trustbroker
    password: ${STATECACHE_PASS}
    driverClassName: ${spring.flyway.driver-class-name}
    hikari:
      maximum-pool-size: 30 # we run 3 pods in PROD => 90 connections max on mariadb (max acceptable is 150 per default)
      connection-timeout: 15000 # DB connection establish timeout in case of network problems (default: 30000ms = 10min)
      minimum-idle: 3 # close connections being idle for idle-timeout except if we have too few afterwards
      idle-timeout: 300000 # maximum connection idle time (default: 600000ms = 10min)
      max-lifetime: 1800000 # maximum connection lifetime in the pool after close (default: 1800000ms = 30min, mariadb has 60min)
      keepalive-time: 600000 # less than max-lifetime using connection-test-query to probe the DB (default: 0ms == disabled)
      connection-test-query: select 1 from dual # probe DB according to keepalive-time
  flyway:
    enabled: true
    url: jdbc:mariadb://mariadb:3306
    user: root
    password: ${STATECACHE_PASS}
    schemas: TBSS16
    driver-class-name: org.mariadb.jdbc.Driver
    locations: [classpath:db/migration/mariadb]
    baselineOnMigrate: true # force upgrading XTB schema even though the database is not empty

trustbroker:
  config:
    issuer: http://localhost:8090 # Issuer ID used to identify assertion/token issuer
    perimeterUrl: ${trustbroker.config.issuer} # Override if network endpoint cannot be derived from issuer ID
    adminSecret: 'trustbroker.config.adminSecret'
    traceIdHeader: X-Request-Id # use edge infrastructure injected HTTP header to correlate all logs belonging to a request
    sessionLifetimeSec: 1800 # 30min user login latency on CP/IDP
    ssoSessionLifetimeSec: 43200 # 12h without re-auth when SSO enabled=true and not SAML forceAuthn=true or OIDC prompt=login
    ssoMinQoaLevel: -2 # we allow SSO for any QOA level sent by CP i.e. unspecified having order# -1 is good enough
    handleResponderErrors: false # Pass through CP/IDP SAML responder messages to CP/SP
    # Support a global signer and the option to read multiple certs from a single keystore (including p12) by picking by name
    signer:
      signerCert: ${TRUSTBROKER_HOME}/configuration/latest/keystore/token-signer/keystore.pem
      password: "${PKI_PASSPHRASE}"
    rolloverSigner:
      signerCert: ${TRUSTBROKER_HOME}/configuration/latest/keystore/token-signer/rollover-keystore.pem
      password: "${PKI_PASSPHRASE}"
    claimsMapping:
      syncSchedule: '0 */1 * * * *' # check for git changes every 1min
    stateCache:
      reapSchedule: '30 * * * * *' # check every 30s for collectable sessions
      reapMaxDelaySec: 25 # randomize actual execution start in multiple instance deployments (K8S replicas)
      targetMaxEntries: 104857 # may number of sessions before garbage collecting the oldest valid ones
      minSessionLifetimeSec: ${trustbroker.config.sessionLifetimeSec}
    secureBrowserHeaders: true # false required for OIDC when XTB runs on http instead of https
    security: # some of the following checks can be configured in RelyingPartySecurityPolicies or ClaimsParty.SecurityPolicies
      tokenLifetimeSec: 3600 # Assertion/Condition/Subject timestamp create/check, override on RP SecurityPolicies.notOnOrAfter
      messageLifetimeSec: 28800 # AuthnRequest/Response/LogoutRequest IssueInstant timestamp check (accepted max)
      notBeforeToleranceSec: -5 # NTP time drift accepted from peer for notBefore timestamps
      notOnOrAfterToleranceSec: 5 # NTP time drift accepted from peer for notOnOrAfter timestamps
      requireSignedAuthnRequest: true # CP/IDP per default expect signed request
      requireSignedResponse: true # CP/IDP per default must sign response
      requireSignedAssertion: true # CP/IDP per default must sign assertion within response
      validateAuthnRequest: true # RP/SP per default must sign request
      validateXmlSchema: true # Peers must comply to SAML protocol schemas pre default
      validateAcs: false # Incoming AssertionConsumerURL is validated against ACWhitelist
      validateRelayState: true # SAML RelayState is required and must match session
      validateAudience: true # SAML audience is matched against XTB issuer if found
      requireAudienceRestriction: false # Non-matching SAML audience results in an error
      validateResponseIssuer: false # SAML response issuer must match ClaimsParty.id (recommended)
      requireSubjectConfirmation: true # SAML responses must contain a SubjectConfirmation element
      validateSubjectConfirmationTimestamp: true # Timestamps must be in range
      validateSubjectConfirmationInResponseTo: true # SAML InResponseTo response attribute must match request ID
      validateRequestIssueInstant: true # Check request IssueInstant timestamp against messageLifeTimeSec
      validateRequestCondition: true # Check Condition before/after timestamps against tokenLifetimeSec and tolerances
      validateResponseIssueInstant: true # Check IssueInstant timestamp against messageLifeTimeSec
      validateAssertionIssueInstant: true # Check IssueInstant timestamp against messageLifeTimeSec
      validateAuthnStatementIssueInstant: true # Check IssueInstant timestamp against messageLifeTimeSec
      doSignAssertions: true # RP/SP responses must contain assertion signed by XTB
      doSignSuccessResponse: true # RP/SP responses must be signed by XTB
      doSignFailureResponse: true # RP/SP responders messages must be signed too
    saml:
      consumerUrl: ${trustbroker.config.perimeterUrl}/api/v1/saml # SAML post protocol endpoint
      artifactResolution:
        serviceUrl: ${trustbroker.config.perimeterUrl}/api/v1/saml/arp # SAML artifact resolution protocol endpoint
        index: 0
        artifactLifetimeSecs: 60
        artifactReapIntervalSecs: 300
        persistentCache: true # store artifacts in sessiondb
        truststore:
          signerCert: ${TRUSTBROKER_HOME}/configuration/latest/keystore/outgoing-tls-trust/truststore.p12
          password: "${PKI_PASSPHRASE}"
    oidc:
      issuer: "${trustbroker.config.issuer}" # iss claim setup
      perimeterUrl: "${trustbroker.config.perimeterUrl}/login/saml2/sso" # XTB OIDC federation forward
      sessionMode: IN_DB # use mariadb for state sharing
      endSessionEndpoint: "${trustbroker.config.oidc.issuer}/logout"
      sessionLifetimeSec: ${trustbroker.config.sessionLifetimeSec}
      sessionCookie: true # set additional tracking cookie for clients to detect session termination
      identityProvider:
        assertionConsumerService: "${trustbroker.config.saml.consumerUrl}"
        responseIssuerId: ${trustbroker.config.issuer}
        signer:
          signerCert: ${trustbroker.config.signer.signerCert}
          password: ${trustbroker.config.signer.password}
          keyEntryId: ${trustbroker.config.signer.keyEntryId}
      samlEncrypt: false # encrypt SAML messages sent from XTB/SAML to XTB/OIDC (more SAMl attributes than OIDC claims
      keySchedule: "0 0 1 * * *" # key rotation daily at 1 am (see spring CronExpression)
      keyExpirationMinutes: 2880 # keys valid for 48 hours (requires clients to fetch keys at least once a day)
      keyDeletionMinutes: 3000 # keys kept 2h longer in the database for debugging
      defaultQoa: "urn:oasis:names:tc:SAML:2.0:ac:classes:unspecified" # fallback for acr_values claims
      # Globally customize /token and /userinfo output dropping technical claims (typ=JWT and iss=issuer we keep for now)
      addTokenClaims: # used on /token endpoint to whitelist OIDC technical claims
        - acr # auth context class refs
        - aud # audience => client_id and other audiences
        - auth_time # authorize time
        - azp # authorized party => client_id
        - exp # token expiration
        - iat # token issued at
        - iss # OIDC issuer ID
        - jti # JSON token ID
        - nbf # token valid not before
        - nonce # message only once ID
        - scope # claims selection
        - session_state # OIDC session spec (future)
        - sid # front channel logout session ID
        - typ # keycloak specific token typing
      removeUserInfoClaims: # used in /userinfo endpoint to blacklist OIDC technical claims (i.e. remove them from response)
        - aud
        - auth_time
        - azp
        - exp
        - iat
        - jti
        - nbf
        - nonce
        - scope
        - session_state
        - sid
    gui:
      defaultLanguage: de # XTB supports de,fre,it,en per default
      features:
        - HEADER
        - FOOTER
      buttons:
        - HELP_PANEL # or HELP_LINK
        - LANGUAGE_SHORT # or LANGUAGE_LONG
      themeCookie:
        name: THEME
        defaultValue: default
        values:
          - default
      languageCookie:
        name: LANG
    skinnyHrdTriggers: # MSIE workaround using a hard-coded HRD handling instead of the standard application
      - name: 'User-Agent'
        regex: '.*Trident/7.*'
        value: '/skinnyColHRD.html'

logging:
  level:
    root: INFO
    swiss.trustbroker.script: DEBUG
